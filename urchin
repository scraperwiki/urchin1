#!/bin/sh

# A skeleton for testing in shell
# Thomas Levine, ScraperWiki
#
# How to use
# --------
# Define a runtests function. Optionally define setup and teardown functions.
# The runtests function will contain the tests that you want to run. setup will
# run before that and teardown will be run after.
#
# Assertions are of this format:
#
#    `assert 'error message' [ expression ]`
#

assert() {
  # Check whether a assertion value is true, then increment counts.
  # Increment the total count first in case of error.
  msg=$1
  shift 1
  assertion=$*
  tests_total=$(($tests_total+1))
  if `$assertion` && tests_passing=$(($tests_passing+1)); then
    echo "Passed: $msg"
    return 0
  else
    echo "Failed: $msg"
    return 1
  fi
}

report_test_results() {
  tests_passing=$1
  tests_total=$2
  tests_error=$3

  echo -----------------------
  echo Ran $tests_total tests
  echo \ -\ $tests_passing successes
  echo \ -\ $(($tests_total - $tests_passing)) failures
  echo \ -\ $tests_error errors
  echo -----------------------

  [ $tests_total -eq $tests_passing ] || return 1
}

# Define these functions if you please
setup()  {
  echo No setup function defined
}
teardown()  {
  echo No teardown function defined
}

# Define your tests in here
runtests() {
  echo You need to define the runtests function.
  exit 1
}

#urchin() {
#  setup || exit 1
#  runtests
#  (report_test_results && status=0) || status=1
#  teardown
#  exit $status
#}

# Main stuff

test_dir=tests
action=testcase

# Error status
status=0

if [ action = 'testcase' ]; then

  # Count tests
  tests_passing=0
  tests_total=0

  # Go
  setup
  runtests
  report_test_results $tests_passing $tests_total $tests_error || status=1
  teardown

elif [ action = 'testsuite' ]; then

  testsuite_tests_passing=0
  testsuite_tests_total=0

  for file in $test_dir/*; do
    (
      . "$file"

      tests_passing=0
      tests_total=0
      tests_error=0

      setup
      runtests
      report_test_results $tests_passing $tests_total $tests_error
      teardown

      # Pass the success rate back
      exit "$tests_passing,$tests_total,$tests_error"
    )
    success_rate=$?

    testsuite_tests_passing=$(($testsuite_tests_passing+`echo $success_rate|cut -d ',' -f 1`))
    testsuite_tests_total=$(($testsuite_tests_total+`echo $success_rate|cut -d ',' -f 2`))
    testsuite_tests_error=$(($testsuite_tests_error+`echo $success_rate|cut -d ',' -f 3`))
  done

  report_test_results $testsuite_tests_passing $testsuite_tests_total $testsuite_tests_error || status=1

fi

exit $status
