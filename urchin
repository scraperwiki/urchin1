#!/bin/sh

# A skeleton for testing in shell
# Thomas Levine, ScraperWiki
#
# How to use
# --------
# Define a runtests function. Optionally define setup and teardown functions.
# The runtests function will contain the tests that you want to run. setup will
# run before that and teardown will be run after.
#
# Assertions are of this format:
#
#    `assert 'error message' [ expression ]`
#

H1='==========================================='
H2='-------------------------------------------'

assert() {
  # Check whether a assertion value is true, then increment counts.
  # Increment the total count first in case of error.
  msg=$1
  shift 1
  assertion=$*
  [ "$msg" = '' ] && msg=$assertion
  tests_total=$(($tests_total+1))

  passed=false
  $assertion && passed=true

  if $passed; then
    tests_passing=$(($tests_passing+1))
    echo "  Passed: $msg"
  else
    echo "  Failed: $msg"
  fi
}

report_test_results() {
  tests_passing=$1
  tests_total=$2

  echo Ran $tests_total tests
  echo \ \ $tests_passing successes
  echo \ \ $(($tests_total - $tests_passing)) failures

  [ $tests_total -eq $tests_passing ] || return 1
}

# Define these functions if you please
setup()  {
  echo No setup function defined
}
teardown()  {
  echo No teardown function defined
}

# Define your tests in here
runtests() {
  echo You need to define the runtests function.
  exit 1
}


# ----------------------------------------
# Main stuff starts here.
# ----------------------------------------

# Parameters
test_dir=tests
USAGE="usage: $0 [-cs] [test suites and test cases...]"

while [ $# -gt 0 ]
do
    case "$1" in
        -c) action=testcase;;
        -s) action=testsuite;;
        -z) action=currentshell;;
#       --) shift; break;;
        -*) echo >&2 $USAGE
            exit 1;;
        *)  break;;
    esac
    shift
done

# Invalid input
[ -s $action ] && echo $USAGE && exit 1

# "$@" contains only names of test suites (directories)
# or test cases (files)

# Error status
status=0

# Run tests
echo
echo
for test_thing in "$@"; do
  case $action in
    testcase)
        # Check that it's a file
        [ -f "$test_thing" ] ||
          ( echo "$test_thing is not a file" && exit 1 )
 
        echo $H2
        echo Test Case: $test_thing
        echo $H2
        (
          # Import the test case
          . "$test_thing"
 
          # Error status
          local_status=0
 
          # Count tests
          tests_passing=0
          tests_total=0
          tests_error=0
  
          # Go
          setup
          echo
          runtests
          echo
          report_test_results $tests_passing $tests_total || local_status=1
          echo
          teardown
 
          exit $local_status
        )
        [ "$?" = "0" ] || status=1; echo $H2;;
 
    testsuite)
        # Check that it's a directory
        [ -d "$test_thing" ] ||
          ( echo "$test_thing is not a directory" && exit 1 )
 
        echo $H1
        echo Test Suite: $test_thing
        echo $H1

        testsuite_tests_passing=0
        testsuite_tests_total=0
        testsuite_tests_error=0
 
        for file in $test_thing/* $test_thing/**/*; do
          # Skip non-files
          [ -f $file ] || continue
 
          tmp=$(mktemp)

          echo Test Case: $file
          echo $H2
          (
            . "$file"
 
            tests_passing=0
            tests_total=0
            tests_error=0
 
            setup
            echo
            runtests
            echo
            report_test_results $tests_passing $tests_total
            echo
            teardown
            echo $H2
 
            # Pass the success rate back
            echo "$tests_passing,$tests_total" > $tmp
          )
          counts="`cat $tmp`"
          testsuite_tests_passing=$(($testsuite_tests_passing+`echo $counts|cut -d ',' -f 1`))
          testsuite_tests_total=$(($testsuite_tests_total+`echo $counts|cut -d ',' -f 2`))
        done
 
        echo -n Test Suite Totals:\ 
        report_test_results $testsuite_tests_passing $testsuite_tests_total || status=1; echo $H1;;
    *)
  esac
  shift
done

exit $status
